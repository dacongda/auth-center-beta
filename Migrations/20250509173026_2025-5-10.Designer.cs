// <auto-generated />
using System;
using AuthCenter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthCenter.Migrations
{
    [DbContext(typeof(AuthCenterDbContext))]
    [Migration("20250509173026_2025-5-10")]
    partial class _2025510
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthCenter.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CertId")
                        .HasColumnType("integer")
                        .HasColumnName("cert_id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ExpiredSecond")
                        .HasColumnType("integer")
                        .HasColumnName("expired_second");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<string[]>("RedirectUrls")
                        .HasColumnType("text[]")
                        .HasColumnName("redirect_urls");

                    b.PrimitiveCollection<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_application");

                    b.HasIndex("CertId")
                        .HasDatabaseName("ix_application_cert_id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_application_client_id");

                    b.ToTable("application", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.Cert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BitSize")
                        .HasColumnType("integer")
                        .HasColumnName("bit_size");

                    b.Property<string>("Certificate")
                        .HasColumnType("text")
                        .HasColumnName("certificate");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CryptoAlgorithm")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crypto_algorithm");

                    b.Property<int>("CryptoSHASize")
                        .HasColumnType("integer")
                        .HasColumnName("crypto_sha_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PriviteKey")
                        .HasColumnType("text")
                        .HasColumnName("privite_key");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cert");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_cert_name");

                    b.ToTable("cert", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.PrimitiveCollection<string[]>("DefaultRoles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("default_roles");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParentChain")
                        .HasColumnType("text")
                        .HasColumnName("parent_chain");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("TopId")
                        .HasColumnType("integer")
                        .HasColumnName("top_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_group_name");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_verified");

                    b.PrimitiveCollection<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("roles");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_user_group_id");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("ix_user_number");

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailVerified = false,
                            Name = "admin",
                            Number = "admin",
                            Password = "$2a$11$6zAIC1EWsrxlit65iwLlVez9zDjnWwE8A2RQt0Ob/OTLa/PRyP1Di",
                            PhoneVerified = false,
                            Roles = new[] { "admin" }
                        });
                });

            modelBuilder.Entity("AuthCenter.Models.Application", b =>
                {
                    b.HasOne("AuthCenter.Models.Cert", "Cert")
                        .WithMany()
                        .HasForeignKey("CertId")
                        .HasConstraintName("fk_application_cert_cert_id");

                    b.Navigation("Cert");
                });

            modelBuilder.Entity("AuthCenter.Models.User", b =>
                {
                    b.HasOne("AuthCenter.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_user_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AuthCenter.Models.Group", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
