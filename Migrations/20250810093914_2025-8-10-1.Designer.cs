// <auto-generated />
using System;
using AuthCenter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthCenter.Migrations
{
    [DbContext(typeof(AuthCenterDbContext))]
    [Migration("20250810093914_2025-8-10-1")]
    partial class _20258101
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthCenter.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CertId")
                        .HasColumnType("integer")
                        .HasColumnName("cert_id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ExpiredSecond")
                        .HasColumnType("integer")
                        .HasColumnName("expired_second");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<string[]>("RedirectUrls")
                        .HasColumnType("text[]")
                        .HasColumnName("redirect_urls");

                    b.PrimitiveCollection<string[]>("SamlAudiences")
                        .HasColumnType("text[]")
                        .HasColumnName("saml_audiences");

                    b.Property<bool>("SamlEncrypt")
                        .HasColumnType("boolean")
                        .HasColumnName("saml_encrypt");

                    b.Property<bool>("SamlResponseCompress")
                        .HasColumnType("boolean")
                        .HasColumnName("saml_response_compress");

                    b.PrimitiveCollection<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_application");

                    b.HasIndex("CertId")
                        .HasDatabaseName("ix_application_cert_id");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_application_client_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_application_group_id");

                    b.ToTable("application", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.Cert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BitSize")
                        .HasColumnType("integer")
                        .HasColumnName("bit_size");

                    b.Property<string>("Certificate")
                        .HasColumnType("text")
                        .HasColumnName("certificate");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CryptoAlgorithm")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("crypto_algorithm");

                    b.Property<int>("CryptoSHASize")
                        .HasColumnType("integer")
                        .HasColumnName("crypto_sha_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PriviteKey")
                        .HasColumnType("text")
                        .HasColumnName("privite_key");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cert");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_cert_name");

                    b.ToTable("cert", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DefaultApplicationId")
                        .HasColumnType("integer")
                        .HasColumnName("default_application_id");

                    b.PrimitiveCollection<string[]>("DefaultRoles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("default_roles");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParentChain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("parent_chain");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("TopId")
                        .HasColumnType("integer")
                        .HasColumnName("top_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasIndex("DefaultApplicationId")
                        .IsUnique()
                        .HasDatabaseName("ix_group_default_application_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_group_name");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("auth_endpoint");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int?>("CertId")
                        .HasColumnType("integer")
                        .HasColumnName("cert_id");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("client_secret");

                    b.Property<string>("ConfigureUrl")
                        .HasColumnType("text")
                        .HasColumnName("configure_url");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<bool?>("EnableSSL")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_ssl");

                    b.Property<string>("FaviconUrl")
                        .HasColumnType("text")
                        .HasColumnName("favicon_url");

                    b.Property<string>("JwksEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("jwks_endpoint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<string>("RegionId")
                        .HasColumnType("text")
                        .HasColumnName("region_id");

                    b.Property<string>("Scopes")
                        .HasColumnType("text")
                        .HasColumnName("scopes");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sub_type");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("TokenEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("token_endpoint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserInfoEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("user_info_endpoint");

                    b.HasKey("Id")
                        .HasName("pk_provider");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_provider_name");

                    b.ToTable("provider", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<bool>("EnableEmailMfa")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_email_mfa");

                    b.Property<bool>("EnablePhoneMfa")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_phone_mfa");

                    b.Property<bool>("EnableTotpMfa")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_totp_mfa");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_verified");

                    b.Property<string>("PreferredMfaType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preferred_mfa_type");

                    b.Property<string>("RecoveryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recovery_code");

                    b.PrimitiveCollection<string[]>("Roles")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("roles");

                    b.Property<string>("TotpSecret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("totp_secret");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_user_group_id");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("ix_user_number");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.WebAuthnCredential", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<Guid>("AaGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("aa_guid");

                    b.Property<byte[]>("AttestationClientDataJson")
                        .HasColumnType("bytea")
                        .HasColumnName("attestation_client_data_json");

                    b.Property<byte[]>("AttestationObject")
                        .HasColumnType("bytea")
                        .HasColumnName("attestation_object");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsBackedUp")
                        .HasColumnType("boolean")
                        .HasColumnName("is_backed_up");

                    b.Property<bool>("IsBackupEligible")
                        .HasColumnType("boolean")
                        .HasColumnName("is_backup_eligible");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("public_key");

                    b.Property<DateTimeOffset>("RegDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reg_date");

                    b.Property<long>("SignCount")
                        .HasColumnType("bigint")
                        .HasColumnName("sign_count");

                    b.PrimitiveCollection<int[]>("Transports")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("transports");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_web_authn_credential");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_web_authn_credential_user_id");

                    b.ToTable("web_authn_credential", (string)null);
                });

            modelBuilder.Entity("AuthCenter.Models.Application", b =>
                {
                    b.HasOne("AuthCenter.Models.Cert", "Cert")
                        .WithMany()
                        .HasForeignKey("CertId")
                        .HasConstraintName("fk_application_cert_cert_id");

                    b.HasOne("AuthCenter.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_application_group_group_id");

                    b.OwnsMany("AuthCenter.Models.ProviderItem", "ProviderItems", b1 =>
                        {
                            b1.Property<int>("FakeId")
                                .HasColumnType("integer");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<int>("ProviderId")
                                .HasColumnType("integer");

                            b1.PrimitiveCollection<string[]>("Rule")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("Type")
                                .HasColumnType("text");

                            b1.HasKey("FakeId", "__synthesizedOrdinal");

                            b1.ToTable("application");

                            b1.ToJson("provider_items");

                            b1.WithOwner()
                                .HasForeignKey("FakeId")
                                .HasConstraintName("fk_application_application_fake_id");
                        });

                    b.Navigation("Cert");

                    b.Navigation("Group");

                    b.Navigation("ProviderItems");
                });

            modelBuilder.Entity("AuthCenter.Models.Group", b =>
                {
                    b.HasOne("AuthCenter.Models.Application", "DefaultApplication")
                        .WithOne()
                        .HasForeignKey("AuthCenter.Models.Group", "DefaultApplicationId")
                        .HasConstraintName("fk_group_application_default_application_id");

                    b.Navigation("DefaultApplication");
                });

            modelBuilder.Entity("AuthCenter.Models.Provider", b =>
                {
                    b.OwnsOne("AuthCenter.Models.UserInfoMap", "UserInfoMap", b1 =>
                        {
                            b1.Property<int>("ProviderId")
                                .HasColumnType("integer");

                            b1.HasKey("ProviderId");

                            b1.ToTable("provider");

                            b1.ToJson("user_info_map");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId")
                                .HasConstraintName("fk_provider_provider_id");
                        });

                    b.Navigation("UserInfoMap");
                });

            modelBuilder.Entity("AuthCenter.Models.User", b =>
                {
                    b.HasOne("AuthCenter.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_user_group_group_id");

                    b.Navigation("Group");
                });
#pragma warning restore 612, 618
        }
    }
}
